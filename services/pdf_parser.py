import PyPDF2
import re
import os
import logging
from database.db_connection import Database
from config import Config

logger = logging.getLogger(__name__)

class GuideParser:
    def __init__(self):
        self.db = Database()
        self.guide_path = os.path.join(Config.GUIDE_FOLDER, "digital_literacy_guide.pdf")

    def parse_guide_pdf(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞"""
        
        if not os.path.exists(self.guide_path):
            logger.error(f"‚ùå –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {self.guide_path}")
            return 0

        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.db.clear_guide_data()

            with open(self.guide_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                sections_count = 0

                full_text = ""
                for page_num, page in enumerate(pdf_reader.pages):
                    page_text = page.extract_text()
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    cleaned_text = self._clean_page_text(page_text, page_num + 1)
                    full_text += cleaned_text + "\n"

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∏—Å—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                sections = self._extract_clean_sections(full_text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                for section in sections:
                    if self._is_quality_section(section):
                        self.db.save_guide_section(
                            title=section['title'],
                            content=section['content'],
                            page=section.get('page'),
                            category=section.get('category')
                        )
                        sections_count += 1

                logger.info(f"‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {sections_count} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")
                return sections_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {e}")
            return 0

    def _clean_page_text(self, text: str, page_num: int) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –º—É—Å–æ—Ä–∞"""
        if not text.strip():
            return ""
            
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            
            # –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä
            if self._is_garbage_line(line, page_num):
                continue
                
            # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
            cleaned_line = self._clean_line(line)
            if cleaned_line:
                cleaned_lines.append(cleaned_line)
        
        return '\n'.join(cleaned_lines)

    def _is_garbage_line(self, line: str, page_num: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –º—É—Å–æ—Ä–æ–º"""
        # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            return True
            
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if line.isdigit() and int(line) in [page_num, page_num - 1, page_num + 1]:
            return True
            
        # –ü–æ–¥–ø–∏—Å–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º (1.1, 2.2, 1.15 –∏ —Ç.–¥.)
        if re.match(r'^\d+\.\d+$', line):
            return True
            
        # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞
        if len(line) < 3 and not line.isalpha():
            return True
            
        # –°—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏
        if re.match(r'^[\d\.\s]+$', line):
            return True
            
        return False

    def _clean_line(self, line: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        line = re.sub(r'\s+', ' ', line)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã, –Ω–æ–º–µ—Ä–∞)
        line = re.sub(r'(?<!\d)\s\d{1,2}\s(?!\d)', ' ', line)
        
        return line.strip()

    def _extract_clean_sections(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        sections = []
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–ª–∞–≤
        chapter_patterns = [
            r'–ì–õ–ê–í–ê [–ê-–Ø]+\s*[–ê-–Ø]*(?:\s*/\s*[–ê-–Ø\s]+)?\n(.*?)(?=–ì–õ–ê–í–ê|$)',
            r'[–ê-–Ø][–ê-–Ø\s]{10,}\n(.*?)(?=[–ê-–Ø][–ê-–Ø\s]{10,}|$)',
        ]
        
        for pattern in chapter_patterns:
            matches = re.finditer(pattern, text, re.DOTALL)
            for match in matches:
                title = match.group(0).split('\n')[0].strip()
                content = match.group(1).strip()
                
                if len(content) > 200:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞
                    cleaned_content = self._clean_section_content(content)
                    
                    section = {
                        'title': title,
                        'content': cleaned_content,
                        'category': 'chapter'
                    }
                    sections.append(section)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã
        if not sections:
            paragraphs = re.split(r'\n\s*\n', text)
            for paragraph in paragraphs:
                paragraph = paragraph.strip()
                if self._is_meaningful_paragraph(paragraph):
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
                    first_line = paragraph.split('\n')[0]
                    title = first_line[:100] + '...' if len(first_line) > 100 else first_line
                    
                    section = {
                        'title': title,
                        'content': self._clean_section_content(paragraph),
                        'category': 'paragraph'
                    }
                    sections.append(section)
        
        return sections

    def _clean_section_content(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        lines = content.split('\n')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            if not self._is_garbage_line(line, 0) and len(line) > 10:
                cleaned_line = self._clean_line(line)
                if cleaned_line:
                    cleaned_lines.append(cleaned_line)
        
        return '\n'.join(cleaned_lines)

    def _is_meaningful_paragraph(self, paragraph: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º"""
        if len(paragraph) < 100:
            return False
            
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        words = paragraph.split()
        if len(words) < 15:
            return False
            
        # –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ —Ü–∏—Ñ—Ä
        digit_ratio = sum(1 for char in paragraph if char.isdigit()) / len(paragraph)
        if digit_ratio > 0.3:
            return False
            
        return True

    def _is_quality_section(self, section: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        content = section['content']
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if len(content) < 150:
            return False
            
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        words = content.split()
        if len(words) < 20:
            return False
            
        # –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–±–æ—Ä–æ–º —Ü–∏—Ñ—Ä
        if re.match(r'^[\d\s\.]+$', content):
            return False
            
        return True

    def get_guide_content_for_training(self, max_sections: int = 15):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        sections = self.db.get_guide_sections(limit=max_sections)
        
        if not sections:
            return ""

        content = "–û–ß–ò–©–ï–ù–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –¶–ò–§–†–û–í–û–ô –ì–†–ê–ú–û–¢–ù–û–°–¢–ò:\n\n"
        for section in sections:
            title = section['section_title']
            section_content = section['section_content']
            
            content += f"=== {title} ===\n"
            content += f"{section_content}\n"
            content += "="*50 + "\n\n"

        logger.info(f"üìö –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ—á–∏—â–µ–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return content

    def check_guide_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
        return os.path.exists(self.guide_path)