from flask import Flask, render_template, request, jsonify
import os
import json
import logging
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from config import Config
from services.gigachat_service import GigaChatService
from database.db_connection import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'digital-trainer-secret-2024'
app.config.from_object(Config)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    gigachat_service = GigaChatService()
    db = Database()
    GIGACHAT_AVAILABLE = True
    logger.info("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    GIGACHAT_AVAILABLE = False
    gigachat_service = None
    db = None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"""
    return render_template('index.html', 
                         GIGACHAT_AVAILABLE=GIGACHAT_AVAILABLE)

@app.route('/api/learn-topic', methods=['POST'])
def learn_topic():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ"""
    if not GIGACHAT_AVAILABLE:
        return jsonify({
            'status': 'error',
            'error': 'GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }), 503

    try:
        data = request.get_json()
        topic = data.get('topic', '').strip()
        
        if not topic:
            return jsonify({
                'status': 'error',
                'error': '–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'
            }), 400

        logger.info(f"üéì –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã: {topic}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –ë–î
        relevant_sections = get_relevant_sections(topic)
        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {len(relevant_sections)}")
        
        if not relevant_sections:
            return jsonify({
                'status': 'success',
                'explanation': f"–í —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{topic}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                'quiz': None
            })

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∞
        prompt = create_learning_prompt(topic, relevant_sections)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
        response = gigachat_service.client.chat(prompt)
        content = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + —Ç–µ—Å—Ç)
        explanation, quiz = parse_learning_response(content, topic, relevant_sections)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        if quiz:
            logger.info(f"‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:")
            logger.info(f"   –í–æ–ø—Ä–æ—Å: {quiz['question']}")
            logger.info(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {quiz['options']}")
            logger.info(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['correct_answer']}")
        else:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        logger.info(f"üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Ä–æ–∫ –ø–æ —Ç–µ–º–µ '{topic}': quiz={quiz is not None}")

        return jsonify({
            'status': 'success',
            'explanation': explanation,
            'quiz': quiz
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {e}")
        return jsonify({
            'status': 'error',
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞'
        }), 500

@app.route('/api/check-answer', methods=['POST'])
def check_answer():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç"""
    try:
        data = request.get_json()
        answer_index = data.get('answer_index')
        quiz_data = data.get('quiz_data')
        
        if answer_index is None or quiz_data is None:
            return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        is_correct = (answer_index == quiz_data['correct_answer'])
        
        result = {
            'is_correct': is_correct,
            'explanation': quiz_data['explanation'],
            'correct_answer': quiz_data['correct_answer']
        }
        
        return jsonify({
            'status': 'success', 
            'result': result
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500

def get_relevant_sections(topic):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ë–î –ø–æ —Ç–µ–º–µ"""
    try:
        sections = db.get_guide_sections(limit=50)
        relevant = []
        
        topic_lower = topic.lower()
        topic_words = [word for word in topic_lower.split() if len(word) > 2]
        
        for section in sections:
            title = section['section_title'].lower()
            content = section['section_content'].lower()
            
            score = 0
            
            if topic_lower in title:
                score += 10
            if topic_lower in content:
                score += 5
                
            for word in topic_words:
                if word in title:
                    score += 3
                if word in content:
                    score += 1
            
            if score >= 2:
                relevant.append({
                    'title': section['section_title'],
                    'content': section['section_content'],
                    'score': score,
                    'page': section['page_number']
                })
        
        relevant.sort(key=lambda x: x['score'], reverse=True)
        
        logger.info(f"üîç –ü–æ —Ç–µ–º–µ '{topic}' –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(relevant)}")
        for section in relevant[:3]:
            logger.info(f"   - '{section['title']}' (score: {section['score']})")
        
        return relevant[:3]
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
        return []

def create_learning_prompt(topic, relevant_sections):
    """–°–æ–∑–¥–∞–Ω–∏–µ –£–õ–¨–¢–†–ê-–°–¢–†–û–ì–û–ì–û –ø—Ä–æ–º–ø—Ç–∞"""
    
    concrete_texts = []
    for i, section in enumerate(relevant_sections[:2], 1):
        concrete_text = section['content'][:500]
        concrete_texts.append(f"–†–ê–ó–î–ï–õ {i} '{section['title']}':\n{concrete_text}")
    
    concrete_content = "\n\n".join(concrete_texts)
    
    prompt = f"""
    –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –≠–¢–£ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ò–ó –†–£–ö–û–í–û–î–°–¢–í–ê:

    {concrete_content}

    –ó–ê–ü–†–ï–©–ï–ù–û:
    - –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
    - –î–∞–≤–∞—Ç—å –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã

    –ó–ê–î–ê–ß–ê 1: –û–ë–™–Ø–°–ù–ï–ù–ò–ï –¢–ï–ú–´ "{topic.upper()}"
    - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ
    - –¶–∏—Ç–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ñ—Ä–∞–∑—ã –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    –ó–ê–î–ê–ß–ê 2: –¢–ï–°–¢–û–í–´–ô –í–û–ü–†–û–°
    - –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ô —Ñ–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
    - –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—Å—Ç–µ
    - –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π –∏–ª–∏ –ø—Ä—è–º—ã–º —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞

    –ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:
    "–ö–æ–º–ø—å—é—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–æ–º—É, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–Ω–µ —Ç—É–¥–∞'. –û–Ω —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –µ–≥–æ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ –Ω–µ —Å–∫–∞–∂–µ—Ç—Å—è. –° –ø–æ–º–æ—â—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –æ–±—â–∞—Ç—å—Å—è —Å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏."

    –ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–û–ü–†–û–°–ê:
    "–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞–≤–∏—à–∞ Enter —Å–æ–≥–ª–∞—Å–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É?"

    –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
    {{
        "explanation": "–¢–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –¶–ò–¢–ê–¢–ê–ú–ò –∏–∑ —Ç–µ–∫—Å—Ç–∞...",
        "quiz": {{
            "question": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É –≤—ã—à–µ...",
            "options": ["–≤–∞—Ä–∏–∞–Ω—Ç1", "–≤–∞—Ä–∏–∞–Ω—Ç2", "–≤–∞—Ä–∏–∞–Ω—Ç3", "–≤–∞—Ä–∏–∞–Ω—Ç4"],
            "correct_answer": 0,
            "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –≤–∞—Ä–∏–∞–Ω—Ç X, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–∫–∞–∑–∞–Ω–æ: '–¶–ò–¢–ê–¢–ê –ò–ó –†–£–ö–û–í–û–î–°–¢–í–ê'."
        }}
    }}

    –ù–ê–ß–ò–ù–ê–ô –û–¢–í–ï–¢ –° {{"
    """
    
    return prompt

def parse_learning_response(response, topic, relevant_sections):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        cleaned_response = response.strip()
        logger.info(f"üîß Raw GigaChat response: {cleaned_response[:500]}...")
        
        start = cleaned_response.find('{')
        end = cleaned_response.rfind('}') + 1
        
        if start == -1 or end == 0:
            raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            
        json_str = cleaned_response[start:end]
        data = json.loads(json_str)
        
        explanation = data.get('explanation', '')
        
        # –ü–†–û–í–ï–†–ö–ê: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        if not contains_concrete_info(explanation, relevant_sections):
            logger.warning("‚ö†Ô∏è GigaChat –¥–∞–ª –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏!")
            explanation = create_forced_explanation(topic, relevant_sections)
        
        quiz_data = data.get('quiz')
        if not quiz_data:
            return explanation, None
            
        quiz = validate_and_fix_quiz(quiz_data, topic, relevant_sections)
        
        return explanation, quiz
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return create_forced_explanation(topic, relevant_sections), create_forced_quiz(topic, relevant_sections)

def contains_concrete_info(explanation, relevant_sections):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
    if not explanation:
        return False
        
    guide_keywords = set()
    for section in relevant_sections:
        content_lower = section['content'].lower()
        words = set(re.findall(r'\b\w{4,}\b', content_lower))
        guide_keywords.update(words)
    
    explanation_lower = explanation.lower()
    matches = sum(1 for word in guide_keywords if word in explanation_lower)
    
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏: {matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º")
    return matches > 2

def create_forced_explanation(topic, relevant_sections):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    first_section = relevant_sections[0]
    content = first_section['content']
    
    sentences = re.split(r'[.!?]+', content)
    meaningful_sentences = [s.strip() for s in sentences if len(s.strip()) > 20][:3]
    
    if meaningful_sentences:
        explanation = " ".join(meaningful_sentences)
        if len(explanation) > 400:
            explanation = explanation[:400] + "..."
    else:
        explanation = content[:300] + "..."
    
    logger.info("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–∑ –ë–î")
    return explanation

def validate_and_fix_quiz(quiz_data, topic, relevant_sections):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        required_fields = ['question', 'options', 'correct_answer', 'explanation']
        for field in required_fields:
            if field not in quiz_data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        if not isinstance(quiz_data['options'], list) or len(quiz_data['options']) != 4:
            quiz_data['options'] = ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"]
        
        if not isinstance(quiz_data['correct_answer'], int) or not 0 <= quiz_data['correct_answer'] <= 3:
            quiz_data['correct_answer'] = 0
            
        quiz = {
            'id': f'quiz_{hash(topic)}',
            'question': quiz_data['question'],
            'options': quiz_data['options'],
            'correct_answer': quiz_data['correct_answer'],
            'explanation': quiz_data['explanation']
        }
        
        return quiz
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        return create_forced_quiz(topic, relevant_sections)

def create_forced_quiz(topic, relevant_sections):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    first_section = relevant_sections[0]
    content = first_section['content']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    sentences = re.split(r'[.!?]+', content)
    first_meaningful = next((s.strip() for s in sentences if len(s.strip()) > 30), content[:100])
    
    quiz = {
        'id': 'forced_quiz',
        'question': f'–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –æ —Ç–µ–º–µ "{topic}"?',
        'options': [
            first_meaningful[:80] + "...",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ",
            "–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", 
            "–ù—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"
        ],
        'correct_answer': 0,
        'explanation': f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "{first_section["title"]}" —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.'
    }
    
    logger.info("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑ –ë–î")
    return quiz

@app.route('/api/debug-sections')
def debug_sections():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    if not db:
        return jsonify({'error': '–ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
    sections = db.get_guide_sections(limit=10)
    result = []
    
    for section in sections:
        result.append({
            'id': section['id'],
            'title': section['section_title'],
            'content_preview': section['section_content'][:200] + '...',
            'page': section['page_number'],
            'category': section['category'],
            'content_length': len(section['section_content'])
        })
    
    return jsonify({
        'status': 'success',
        'sections_count': len(sections),
        'sections': result
    })

@app.route('/api/debug-topic-search')
def debug_topic_search():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ"""
    topic = request.args.get('topic', '–∫–æ–º–ø—å—é—Ç–µ—Ä')
    
    sections = db.get_guide_sections(limit=20)
    relevant = get_relevant_sections(topic)
    
    result = {
        'topic': topic,
        'total_sections': len(sections),
        'relevant_sections': len(relevant),
        'relevant_details': []
    }
    
    for section in relevant:
        result['relevant_details'].append({
            'title': section['title'],
            'score': section['score'],
            'content_preview': section['content'][:300] + '...',
            'content_length': len(section['content'])
        })
    
    return jsonify(result)

@app.route('/api/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    sections_count = 0
    if db:
        try:
            sections = db.get_guide_sections(limit=1)
            sections_count = len(sections)
        except:
            sections_count = 0
    
    return jsonify({
        'status': 'running',
        'gigachat_available': GIGACHAT_AVAILABLE,
        'sections_loaded': sections_count
    })

def initialize_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞...")
    
    Config.init_directories()
    
    if db:
        db.init_db()
        
        from services.pdf_parser import GuideParser
        parser = GuideParser()
        if parser.check_guide_exists():
            db.clear_guide_data()
            logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
            sections_count = parser.parse_guide_pdf()
            logger.info(f"üìö PDF —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {sections_count} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            sections = db.get_guide_sections(limit=10)
            logger.info(f"üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(sections)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            for section in sections:
                logger.info(f"   - {section['section_title']} ({len(section['section_content'])} chars)")
                
            test_sections = get_relevant_sections("–∫–æ–º–ø—å—é—Ç–µ—Ä")
            logger.info(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ '–∫–æ–º–ø—å—é—Ç–µ—Ä': –Ω–∞–π–¥–µ–Ω–æ {len(test_sections)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
        else:
            logger.warning("‚ö†Ô∏è PDF —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ guide/digital_literacy_guide.pdf")
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

if __name__ == '__main__':
    initialize_system()
    
    logger.info("üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üîç –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000/")
    
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=False)